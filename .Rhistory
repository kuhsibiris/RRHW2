install.packages("dplyr")
install.packages("openxlsx")
mivar<-read.table("~/Downloads/UCI HAR Dataset/test/subject_test.txt")
library(openxlsx)
write.xlsx(mivar,"mivar.xlsx")
install.packages("ggplot2")
train_subject<-read.table("~/Downloads/UCI HAR Dataset/train/subject_train.txt")
train_X<-read.table("~/Downloads/UCI HAR Dataset/train/X_train.txt")
train_Y<-read.table("~/Downloads/UCI HAR Dataset/train/y_train.txt")
test_subject<-read.table("~/Downloads/UCI HAR Dataset/test/subject_train.txt")
test_subject<-read.table("~/Downloads/UCI HAR Dataset/test/subject_test.txt")
test_X<-read.table("~/Downloads/UCI HAR Dataset/test/X_test.txt")
test_Y<-read.table("~/Downloads/UCI HAR Dataset/test/y_test.txt")
features<-read.table("~/Downloads/UCI HAR Dataset/features.txt")
activity_labels<-read.table("~/Downloads/UCI HAR Dataset/activity_labels.txt")
View(activity_labels)
colnames(train_X)<-features$V2
colnames(train_Y)<-features$V2
colnames(test_X)<-features$V2
colnames(test_subject)
colnames(train_subject)<-colnames(test_subject)<-"subject"
colnames(test_Y)
colnames(test_Y)<-colnames(train_Y)<-"response"
train_X$set<-"train"
test_X$set<-"test"
total_train<-cbind(train_subject,train_X,train_Y)
total_test<-cbind(test_subject.test_X,test_Y)
total_test<-cbind(test_subject,test_X,test_Y)
total_Base<-rbind(total_test,total_train)
library(dplyr)
total_Base<-left_join(total_Base,activity_labels,by=c("response"="V1"))
View(total_Base)
colnames(total_Base)
colnames(total_Base) %>%  table
View(table)
View(colnames(total_Base) %>%  table
)
View(features$V2 %>%  table)
install.packages("stringr")
library(stringr)
colnames(total_Base)
cond1<-colnames(total_Base) %>% str_detect("mean")
cond2<-colnames(total_Base) %>% str_detect("std")
total_Base2<-total_Base2[,cond1|cond2]
total_Base2<-total_Base[,cond1|cond2]
total_Base2<-left_join(total_Base2,activity_labels,by=c("response"="V1"))
cond1<-colnames(train_X) %>% str_detect("mean")
cond2<-colnames(test_X) %>% str_detect("std")
train_X[,cond1|cond2]
test_X<-test_X[,cond1|cond2]
rm(list=ls())
train_subject<-read.table("~/Downloads/UCI HAR Dataset/train/subject_train.txt")
train_X<-read.table("~/Downloads/UCI HAR Dataset/train/X_train.txt")
train_Y<-read.table("~/Downloads/UCI HAR Dataset/train/y_train.txt")
test_subject<-read.table("~/Downloads/UCI HAR Dataset/test/subject_test.txt")
test_X<-read.table("~/Downloads/UCI HAR Dataset/test/X_test.txt")
test_Y<-read.table("~/Downloads/UCI HAR Dataset/test/y_test.txt")
features<-read.table("~/Downloads/UCI HAR Dataset/features.txt")
activity_labels<-read.table("~/Downloads/UCI HAR Dataset/activity_labels.txt")
colnames(train_X)<-features$V2
colnames(test_X)<-features$V2
cond1<-colnames(train_X) %>% str_detect("mean")
cond2<-colnames(test_X) %>% str_detect("std")
train_X<-train_X[,cond1|cond2]
test_X<-test_X[,cond1|cond2]
colnames(train_subject)<-colnames(test_subject)<-"subject"
colnames(test_Y)<-colnames(train_Y)<-"response"
train_X$set<-"train"
test_X$set<-"test"
total_train<-cbind(train_subject,train_X,train_Y)
total_test<-cbind(test_subject,test_X,test_Y)
total_Base<-rbind(total_test,total_train)
total_Base<-left_join(total_Base,activity_labels,by=c("response"="V1"))
View(total_Base)
colnames(total_Base)[colnames(total_Base)=="V2]
colnames(total_Base)[colnames(total_Base)=="V2"]
colnames(total_Base)[colnames(total_Base)=="V2"]<-"activity_name"
colnames(total_Base)
activity_mean_subject<-total_Base %>% group_by(activity_name,subject) %>%summarise_all(,mean)
activity_mean_subject<-total_Base %>% group_by(activity_name,subject) %>%summarise_all(mean)
warnings()
View(activity_mean_subject)
activity_mean_subject[.c("set","response")]
activity_mean_subject[,c("set","response")]
activity_mean_subject[,c("set","response")]<-NULL
View(activity_mean_subject)
install.packages("rmarkdown")
# getting-cleaning-data
This project contains the script run_analysis.R that has the code that turns the given data set
into a tidy one and takes the mean across variables grouped by individual and activity.
The codebook is in codebook.md
write.table(total_Base,"total_Base.txt")
write.table(total_Base,"~/Downloads/total_Base.txt")
write.table(activity_mean_subject,"~/Downloads/activity_mean_subject.txt")
# The objetive of this code is to fullfill these 5 requirements
#
# 1. Merges the training and the test sets to create one data set.
# 2. Extracts only the measurements on the mean and standard deviation for each measurement.
# 3. Uses descriptive activity names to name the activities in the data set
# 4. Appropriately labels the data set with descriptive variable names.
# 5. From the data set in step 4, creates a second, independent tidy data set with the average of each variable for each activity and each subject.
library(dplyr)
library(stringr)
#start with an emply enviroment
rm(list=ls())
#Read the relevant info for the train set
train_subject<-read.table("~/Downloads/UCI HAR Dataset/train/subject_train.txt")
train_X<-read.table("~/Downloads/UCI HAR Dataset/train/X_train.txt")
train_Y<-read.table("~/Downloads/UCI HAR Dataset/train/y_train.txt")
#Read the relevant info for the test set
test_subject<-read.table("~/Downloads/UCI HAR Dataset/test/subject_test.txt")
test_X<-read.table("~/Downloads/UCI HAR Dataset/test/X_test.txt")
test_Y<-read.table("~/Downloads/UCI HAR Dataset/test/y_test.txt")
#Read features and activity levels
features<-read.table("~/Downloads/UCI HAR Dataset/features.txt")
activity_labels<-read.table("~/Downloads/UCI HAR Dataset/activity_labels.txt")
#Rename colnames this fulfills requirement 4.
colnames(train_X)<-features$V2
colnames(test_X)<-features$V2
#This will filter column names with mean or std in them thus fulfilling 2.
cond1<-colnames(train_X) %>% str_detect("mean")
cond2<-colnames(test_X) %>% str_detect("std")
train_X<-train_X[,cond1|cond2]
test_X<-test_X[,cond1|cond2]
#this gives name to columns without mames and keeps track where the data came from
#thus keeping the data tidy
colnames(train_subject)<-colnames(test_subject)<-"subject"
colnames(test_Y)<-colnames(train_Y)<-"response"
train_X$set<-"train"
test_X$set<-"test"
#this will join the data together thus fulfilling 1-
total_train<-cbind(train_subject,train_X,train_Y)
total_test<-cbind(test_subject,test_X,test_Y)
total_Base<-rbind(total_test,total_train)
#this will add activity names, thus fulfilling 3.
total_Base<-left_join(total_Base,activity_labels,by=c("response"="V1"))
colnames(total_Base)[colnames(total_Base)=="V2"]<-"activity_name"
# Save base
write.table(total_Base,"~/Downloads/total_Base.txt")
#this will create the table that summarises mean given activity and subject thus fulfilling 5.
activity_mean_subject<-total_Base %>% group_by(activity_name,subject) %>%summarise_all(mean)
activity_mean_subject[,c("set","response")]<-NULL
#save summary
write.table(activity_mean_subject,"~/Downloads/activity_mean_subject.txt")
colnames(total_Base)
colnames(activity_mean_subject)
write.table(activity_mean_subject,"~/Downloads/activity_mean_subject.txt",row.names = FALSE)
setwd("~/ReproducibleResearchHW1/RepData_PeerAssessment1/")
setwd("~/ReproducibleResearchHW1/RepData_PeerAssessment1/")
unzip("activity.zip")
ActivityData<-read.csv2("activity.csv")
View(ActivityData)
ActivityData<-read.csv("activity.csv")
View(features)
View(ActivityData)
rm(list=ls())
ActivityData<-read.csv("activity.csv")
View(ActivityData)
View(ActivityData)
ActivityData$date<-ActivityData$date %>% as.Date()
library(dplyr)
ActivityData$date<-ActivityData$date %>% as.Date()
View(ActivityData)
weekdays(ActivityData)
weekdays(ActivityData$date)
ActivityPerDay<-ActivityData %>% group_by(date)%>% summarise(sum(steps,na.rm=T))
library(ggplot2)
ActivityPerDay<-ActivityData %>% group_by(date)%>% summarise(steps=sum(steps,na.rm=T))
qplot(ActivityPerDay$steps)
meanSteps<-mean(ActivityPerDay$steps,na.rm=T)
medianSteps<-median(ActivityPerDay$steps,na.rm=T)
StepByDayData<-c(mean=mean(ActivityPerDay$steps,na.rm=T),
median=median(ActivityPerDay$steps,na.rm=T))
print(StepByDayData)
qplot(ActivityPerDay$steps)+geom_abline(x=StepByDayData$mean))
qplot(ActivityPerDay$steps)+geom_abline(x=aes(StepByDayData$mean))
qplot(ActivityPerDay$steps)+geom_vline(xintercept = StepByDayData$mean)
StepByDayData[mean]
qplot(ActivityPerDay$steps)+geom_vline(xintercept = StepByDayData["mean"])
qplot(ActivityPerDay$steps)+geom_vline(xintercept = StepByDayData["mean"],color="red")
qplot(ActivityPerDay$steps)+geom_vline(xintercept = StepByDayData["mean"],color="red")+
geom_vline(xintercept = 10:100)
qplot(ActivityPerDay$steps)+geom_vline(xintercept = StepByDayData["mean"],color="red")+
geom_vline(xintercept = 1:10*1000)
qplot(ActivityPerDay$steps)+geom_vline(xintercept = StepByDayData,color=c("red","blue"))
ActivityPerInterval<-ActivityData %>% group_by(interval)%>% summarise(steps=sum(steps,
na.rm=T))
View(ActivityPerInterval)
ActivityPerInterval<-ActivityData %>% group_by(interval)%>% summarise(steps=mean(steps,
na.rm=T))
ActivityPerInterval<-ActivityData %>% group_by(interval)%>% summarise(meansteps=mean(steps,
na.rm=T))
qplot(data = ActivityPerInterval,x=interval,y=meanSteps)
qplot(data = ActivityPerInterval,interval,meanSteps)
ggplot(data = ActivityPerInterval,aes(x=interval,y=meanSteps))+geom_line()
ggplot(data = ActivityPerInterval,aes(x=interval,y=meanSteps))+geom_point()
View(ActivityPerInterval)
ggplot(data = ActivityPerInterval,aes(x=interval,y=meansteps))+geom_point()
ggplot(data = ActivityPerInterval,aes(x=interval,y=meansteps))+geom_line()
ActivityPerInterval[ActivityPerInterval$meansteps==max(ActivityPerInterval$meansteps),]
ActivityData2<-ActivityData
ActivityData2<-left_join(ActivityData,ActivityPerInterval)
ActivityData2$steps[is.na(ActivityData2$steps)]<-ActivityData2$meansteps[is.na(ActivityData2$steps)]
ActivityData2$meansteps<-NULL
View(ActivityData2)
StepByDayData2<-c(mean=mean(ActivityPerDay2$steps,na.rm=T),
median=median(ActivityPerDay2$steps,na.rm=T))
ActivityData2<-ActivityData
ActivityData2<-left_join(ActivityData,ActivityPerInterval)
ActivityData2$steps[is.na(ActivityData2$steps)]<-ActivityData2$meansteps[is.na(ActivityData2$steps)]
ActivityData2$meansteps<-NULL
StepByDayData2<-c(mean=mean(ActivityPerDay2$steps,na.rm=T),
median=median(ActivityPerDay2$steps,na.rm=T))
ActivityPerDay2<-ActivityData2 %>% group_by(date)%>% summarise(steps=sum(steps,na.rm=T))
StepByDayData2<-c(mean=mean(ActivityPerDay2$steps,na.rm=T),
median=median(ActivityPerDay2$steps,na.rm=T))
print(StepByDayData2)
library(ggplot2)
qplot(ActivityPerDay2$steps)+geom_vline(xintercept = StepByDayData2,color=c("red","blue"))
StepByDayData2[1]-StepByDayData2[2]
mean(ActivityData2$steps)
mean(ActivityPerDay2$steps)
median(ActivityPerDay2$steps)
(StepByDayData2[1]-StepByDayData2[2])*10^6
(StepByDayData2[1]-StepByDayData2[2])*10^100
unique(weekdays(ActivityData$date))
weekend=c("sábado","domingo")
ActivityData2$weekend<-ifelse((ActivityData2$date%>% weekdays()) %in% weekend,
"weekend",
"weekday"
)
ActivityWeekend<-ActivityData2%>% group_by(weekend,interval) %>% summarise(steps=mean(steps))
ggplot(data = ActivityWeekend,aes(x=interval,y=steps))+geom_line()+facet_wrap(~wekkend)
ggplot(data = ActivityWeekend,aes(x=interval,y=steps))+geom_line()+facet_wrap(~weekend)
ggplot(data = ActivityWeekend,aes(x=interval,y=steps))+geom_line()+facet_grid(~weekend)
ggplot(data = ActivityWeekend,aes(x=interval,y=steps))+geom_line()+facet_grid(~weekend,
ncol=1)
ggplot(data = ActivityWeekend,aes(x=interval,y=steps))+geom_line()+facet_wrap(~weekend,
ncol=1)
rm (list=ls())
mkdir("~/ReprodResearchHW2/")
dir.create("~/ReprodResearchHW2/")
setwd("~/ReprodResearchHW2/")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2")
setwd("~/ReprodResearchHW2/")
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2FStormData.csv.bz2",
"stormdata.bz2")
unzip("stormdata.bz2")
read.csv2("stormdata.bz2")
StormData<-read.csv2("stormdata.bz2")
View(StormData)
StormData<-read.csv("stormdata.bz2")
View(StormData)
dim(filter(StormData,is.na(FATALITIES)))
StormData %>% filter(is.na(FATALITIES)) %>% dim
library(dplyr)
StormData %>% filter(is.na(FATALITIES)) %>% dim
StormData %>% filter(is.na(INJURIES)) %>% dim
StormData %>% filter(is.na(EVTYPE)) %>% dim
StormData %>% filter(is.na(PROPDMG)) %>% dim
StormData %>% filter(is.na(CROPDMG)) %>% dim
DamagesbyEvent<-StormData %>% group_by(EVTYPE) %>% summarise(
INJURIES=sum(INJURIES),FATALITIES=sum(FATALITIES),PROPDMG=sum(PROPDMG),CROPDMG=sum(CROPDMG))
View(DamagesbyEvent)
StormData<-read.csv("stormdata.bz2",na.strings = "?")
StormData %>% filter(is.na(FATALITIES)) %>% dim
StormData %>% filter(is.na(INJURIES)) %>% dim
StormData %>% filter(is.na(EVTYPE)) %>% dim
StormData %>% filter(is.na(PROPDMG)) %>% dim
StormData %>% filter(is.na(CROPDMG)) %>% dim
View(DamagesbyEvent)
library(ggplot2)
library(tidyr)
install.packages("tidyr")
library(tidyr)
PlotDB<-DamagesbyEvent %>% gather(VARIABLE,VALUE,-EVTYPE)
View(PlotDB)
PlotDB<-DamagesbyEvent %>% gather(VARIABLE,VALUE,-EVTYPE)%>%order_by(VARIABLE,VALUE)
ggplot(DamagesbyEvent,aes(x=EVTYPE,y=VALUE))+geom_bar()+facet_wrap(~VARIABLE)
ggplot(DamagesbyEvent,aes(x=EVTYPE,y=VALUE))+geom_bar()+
ggplot(DamagesbyEvent,aes(x=EVTYPE,y=VALUE))+geom_bar()
ggplot(DamagesbyEvent,aes(x=EVTYPE,y=VALUE))
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_bar()+facet_wrap(~VARIABLE)
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_line()+facet_wrap(~VARIABLE)
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_line()
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_bar()
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_col()
View(DamagesbyEvent)
View(PlotDB)
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_col()+facet_wrap(~VARIABLE)
PlotDB<-filter(PlotDB,VALUE!=0)
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_col()+facet_wrap(~VARIABLE)
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_col()+facet_wrap(~VARIABLE)
View(StormData)
View(StormData)
View(PlotDB)
PlotDB<-DamagesbyEvent %>% gather(VARIABLE,VALUE,-EVTYPE)
PlotDB<-PlotDB %>% group_by(VARIABLE) %>% top_n(15,VALUE)
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_col()+facet_wrap(~VARIABLE)
View(PlotDB)
PlotDB<-DamagesbyEvent %>% gather(VARIABLE,VALUE,-EVTYPE)
PlotDB<-PlotDB %>% group_by(VARIABLE) %>% top_n(2,VALUE)
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_col()+facet_wrap(~VARIABLE)
PlotDB<-PlotDB %>% group_by(VARIABLE) %>% top_n(10,VALUE)
PlotDB<-filter(PlotDB,VARiABLE=="FATALITIES")
PlotDB<-filter(PlotDB,VARIABLE=="INJURIES")
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_col()+facet_wrap(~VARIABLE)
PlotDB<-DamagesbyEvent %>% gather(VARIABLE,VALUE,-EVTYPE)
PlotDB<-PlotDB %>% group_by(VARIABLE) %>% top_n(10,VALUE)
PlotDB<-filter(PlotDB,VARIABLE=="INJURIES")
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_col()+facet_wrap(~VARIABLE)
PlotDB<-PlotDB %>% group_by(VARIABLE) %>% top_n(10,VALUE) %>% arrange(VALUE)
PlotDB<-filter(PlotDB,VARIABLE=="INJURIES")
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_col()+facet_wrap(~VARIABLE)
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_col()+facet_wrap(~VARIABLE)+coord_flip()
PlotDB<-DamagesbyEvent %>% gather(VARIABLE,VALUE,-EVTYPE)
PlotDB<-PlotDB %>% group_by(VARIABLE) %>% top_n(10,VALUE) %>% arrange(VALUE)
#PlotDB<-filter(PlotDB,VARIABLE=="INJURIES")
ggplot(PlotDB,aes(x=EVTYPE,y=VALUE))+geom_col()+facet_wrap(~VARIABLE)+coord_flip()
